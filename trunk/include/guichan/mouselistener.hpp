#ifndef GCN_MOUSELISTENER_HPP
#define GCN_MOUSELISTENER_HPP

#include <string>

namespace gcn
{
  /**
   * A MouseListener listens for mouse events on a widget. When a
   * widget recives a mouse event, the corresponding function
   * in all its mouse listeners will be called. Mouse events are
   * generated by all widgets the mouse touches, and also the
   * focused widget (even if the mouse is outside of it). Note
   * that mouse coordinates are relative to the widget itself.
   *
   * None of the functions in this class does anything at all,
   * it is up to you to overload them.
   *
   * @see Widget::addMouseListener
   */
  class MouseListener
  {
  public:

    /**
     * Destructor.
     */
    virtual ~MouseListener() { }

    /**
     * This function is called when the mouse enters into the
     * widget area.
     */
    virtual void mouseIn() { }

    /**
     * This function is called when the mouse leaves the
     * widget area.
     */
    virtual void mouseOut() { }

    /**
     * This function is called when a mouse button is pressed
     * when the mouse is in the widget area or if the widget
     * has focus.
     *
     * NOTE: A mouse press is NOT equal to a mouse click.
     *       Use mouseClickMessage to check for mouse clicks.
     *
     * @param x the x coordinate of the mouse relative to the
     *          widget itself.
     * @param y the y coordinate of the mouse relative to the
     *          widget itself.
     * @param button the button pressed
     * @see mouseClickMessage
     */
    virtual void mousePress(int x, int y, int button) { }

    /**
     * This function is called when a mouse button is released
     * when the mouse is in the widget area or if the widget
     * has focus.
     *
     * @param x the x coordinate of the mouse relative to the
     *          widget itself.
     * @param y the y coordinate of the mouse relative to the
     *          widget itself.
     * @param button the button released
     */
    virtual void mouseRelease(int x, int y, int button) { }


    /**
     * This function is called when a mouse button is pressed
     * and released (clicked) when the mouse is in the widget
     * area or if the widget has focus.
     * 
     * @param x the x coordinate of the mouse relative to the
     *          widget itself.
     * @param y the y coordinate of the mouse relative to the
     *          widget itself.
     * @param button the button clicked
     * @param count the number of clicks
     */
    virtual void mouseClick(int x, int y, int button, int count) { }
    
    /**
     * This function is called on a mouse wheel up when the mouse
     * is in the widget area or if the widget has focus.
     * 
     * @param x the x coordinate of the mouse relative to the
     *          widget itself.
     * @param y the y coordinate of the mouse relative to the
     *          widget itself.
     */
    virtual void mouseWheelUp(int x, int y) { }

    /**
     * This function is called on a mouse wheel down when the
     * mouse is in the widget area or if the widget has focus.
     * 
     * @param x the x coordinate of the mouse relative to the
     *          widget itself.
     * @param y the y coordinate of the mouse relative to the
     *          widget itself.
     */
    virtual void mouseWheelDown(int x, int y) { }

    /**
     * This function is called when the mouse moves and the
     * mouse is in the widget area or if the widget has focus.
     * 
     * @param x the x coordinate of the mouse relative to the
     *          widget itself.
     * @param y the y coordinate of the mouse relative to the
     *          widget itself.
     */
    virtual void mouseMotion(int x, int y) { }

  }; // end MouseListener

} // end gcn

#endif // end GCN_MOUSELISTENER_HPP
